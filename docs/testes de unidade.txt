TESTES DE UNIDADE

Criar scripts que testem métodos e funções
"Código que testa código"

muitas pessoas sabem apenas fazer testes individuais

Existe uma forma melhor de executar multiplos testes variando seus valores
É chamdo de DDT - Data Driven Testing = Test Direcionado por Dados

Normalmente, os teste de unidade são criados após a programação

Existe uma forma de organização do trabalho que inverte isso. Primeiro se
completam os testes e depois as programação

Em uma Sprint, na manhã 1ª segunda feira, nós conversamos sobre o que será construído.
De tarde, o PO e o QA se reunem para definir os critérios de aceite ( Dado -Qando-Então)
Enquanto isso, os devs montam o esqueleto do código, voltando um resultado fixo

Exemplo:
Na reunião, ficou definido que nesta sprint nos construiriamos 4 funções de calculo
de área:
 public double calcularQuadrado(double lado){ return 0; }
 public double calcularRetangulo(double largura, double comprimento){ return 0; }
 public double calcularTriangulo(double largura, double comprimento){ return 0; }
 public double calcularCirculo(double raio){ return 0; }

 Nos dias seguintes, conforme os devs completem o código,
 os testes vão começar a passar

 Teste funcionando é uma medida do progresso do software

 No TDD, quando executamos a bateria de testes?
 -R: Uma vez por dia ou quando há um novo build

 Esse processo pode evoluir para um processo de Integração Continua (CI)

 Devs                     Passou           Passou
  Ambiente -----> Release -----> Ambiente -------> Ambiente
  Desenvolvimento                de Teste          de Produção

                Integração Continua
                            Entrega Continua (CD) --> Esteira / Pipeline